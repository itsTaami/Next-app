import { useRouter } from "next/router";
import React from "react";
import Image from "next/image";

interface IProps {
  params: [];
}

function Movie({ movie }: any) {
  const router = useRouter();
  console.log("Movie:", movie);

  if (router.isFallback) {
    return <div>Loading....</div>;
  }
  return (
    <>
      <Head>
        <title>{movie.title}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col justify-center h-screen bg-black ">
        <div className="flex flex-col items-center rounded-lg shadow mx-auto md:flex-row md:max-w-xl border-2 border-gray-700 bg-gray-800">
          <Image
            className="object-cover rounded-t-lg md:h-auto md:w-48 md:rounded-none md:rounded-l-lg"
            src={movie.poster}
            alt="test"
            width={1600}
            height={18}
          />
          <div className="flex flex-col justify-between p-4 leading-normal">
            <h5 className="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">
              {movie.title}
            </h5>
            <p className="mb-3 font-normal text-gray-700 dark:text-gray-400">
              {movie.fullplot || movie.plot}
            </p>
            <div className="">
              <span className="inline-block bg-red-600 rounded-full px-3 py-1 font-semibold text-white text-lg mr-2 bottom-0">
                üçÖ: {movie.tomatoes.viewer.meter || "..."}%
              </span>
              <span className="inline-block bg-yellow-400 rounded-full px-3 py-1 font-semibold text-black text-lg mr-2 mb-2">
                IMDB: {movie.imdb.rating}
              </span>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

export async function getServerSideProps({ query }: any) {
  const res = await fetch(`http://localhost:8000/movies/${query.id}`);

  const data = await res.json();
  console.log("============>", data);

  return {
    props: { movie: data.movie },
  };
}

// export async function getStaticPaths() {
//   return {
//     paths: [],
//     fallback: true,
//   };
// }

// export async function getStaticProps({ params }: any) {
//   console.log("params", params);
//   const res = await fetch(`http://localhost:8000/movies/${params.id}`);
//   const data = await res.json();

//   return {
//     props: { movie: data.movie },
//   };
// }

// export async function getStaticProps({ query }: any) {
//   console.log("Query:", query);
//   const res = await fetch(`http://localhost:8005/movies/${query.id}`);
//   const data = await res.json();

//   return {
//     props: { movie: data.movie },
//   };
// }

// export async function getStaticPaths() {
//   return {
//     paths: [],
//     fallback: false,
//   };
// }

// export async function getStaticProps({ params }: any) {
//   console.log("Params:", params);
//   const res = await fetch(`http://localhost:8005/movies/${params.id}`);
//   const data = await res.json();

//   return {
//     props: { movie: data.movie },
//   };
// }

export default Movie;
